Auto Rain – Desain Eksekusi dan Aturan Operasional

Sumber Kode Terkait (sesuai README.md)
- File: asf_auto_rain.py
  - jalankan_auto_rain: loop utama 24/7, monitoring, penjadwalan batch, concurrency.
  - _run_for_account: eksekusi per akun (login, validasi, klik, captcha, hasil).
  - wait_until_ready_on_page: menunggu kondisi halaman siap.
  - get_timer_text, parse_mmss_to_seconds: baca timer dan konversi ke detik.
  - is_rain_button_active, click_rain_button: deteksi dan klik tombol Rain.
  - detect_captcha, capsolver_create_task, capsolver_get_result, inject_captcha_solution: alur captcha.
- Dependensi (asf_core): send_telegram, get_balance, inject_and_validate_token_fast.

Tujuan Utama
- Hanya 1 instance browser Chromium total.
- Paralel via banyak BrowserContext (1 context = 1 akun) → hemat resource, tetap cepat.
- Setiap batch memproses seluruh akun unik tepat satu kali (tanpa duplikat, tanpa terlewat).
- Klik Rain hanya pada jendela waktu valid dan tombol benar-benar aktif.
- Penanganan reCAPTCHA v2 checkbox: “klik centang” terlebih dahulu; jika muncul challenge → solver CapSolver normal sampai tuntas.

Kondisi Valid Sebelum Klik
- Timer selalu ada dan menghitung mundur dari 30:00 ke 00:00 (format mm:ss).
- Klik hanya diperbolehkan jika:
  1) Tombol Rain berstatus active (bukan sekadar ada tombol tip), DAN
  2) Timer berada di rentang 01:59 s.d. 00:01 (konversi: 1 ≤ detik ≤ 119).
- Jangan klik pada:
  - 30:00 s.d. 02:01 (detik ≥ 121), dan
  - 00:00 (detik = 0).

Selector Tombol Rain
- Utama: button.tss-tqv234-content.active, button[class*='tqv234-content'].active
- Tidak menggunakan fallback title: button:has([title='Tip Rain']).
- Fallback berbasis ikon tip tidak dipakai untuk MENENTUKAN “siap”, karena syarat harus .active.

Arsitektur Eksekusi (1 Browser, Banyak Context)
1) Inisialisasi
   - Buka Playwright dan launch 1 browser saja (visible/headless dipilih di sini untuk semua context).
   - Buat 1 context + 1 page monitoring. Tambahkan STEALTH_INIT_SCRIPT. Inject token referensi (akun pertama) agar UI rain (tombol/timer) terlihat.

2) Monitoring 24/7 (halaman global)
   - Loop: baca timer (get_timer_text → parse_mmss_to_seconds) dan cek tombol active (is_rain_button_active).
   - Mulai batch hanya jika active == True DAN 1 ≤ detik ≤ 119.
   - Jika timer 30:00–02:01 atau 00:00 → jangan mulai batch, teruskan menunggu.

3) Penjadwalan Batch Akun (tanpa duplikat)
   - Muat akun dari akunrain.txt, lakukan dedup (disarankan berbasis token; atau name+token jika perlu) → unique_accounts (urutan stabil).
   - Siapkan semaphore max_concurrency (1..5, misal 3) untuk batasi jumlah context aktif bersamaan.
   - Untuk setiap akun unik, jadwalkan task async yang akan membuat context per akun dan menjalankan alur per akun (lihat di bawah).
   - Kumpulkan semua task dengan asyncio.gather agar seluruh akun unik pasti diproses (tidak ada yang terlewat).

4) Alur Per Akun (Context per Akun)
   - Buat BrowserContext baru pada browser yang sama (user-agent/locale/timezone/viewport dapat diacak per context), buat page, tambahkan STEALTH_INIT_SCRIPT.
   - Login token: inject_and_validate_token_fast.
   - Buka https://flip.gg/.
   - Validasi ulang siap-klik pada page akun:
     • Tombol benar-benar active, DAN
     • Timer 1..119 detik (01:59–00:01).
   - Klik tombol Rain hanya saat jendela valid tersebut.

5) Setelah Klik: 3 Skenario
   A) Langsung sukses (tanpa captcha)
      - Beri grace period 0.8–2 detik agar UI menampilkan notifikasi.
      - Cek hasil:
        • Jika ada pesan “You have already entered this rain!” → sudah ikut sebelumnya.
        • Jika tidak ada pesan di atas dan ada indikator sukses/toast → anggap sukses.
        • Jika hanya “loading” tanpa kepastian, lanjutkan ke deteksi captcha (B) agar tidak terjebak menunggu.

   B) Muncul reCAPTCHA v2 checkbox (prioritas “klik centang”)
      - Deteksi iframe anchor reCAPTCHA (src mengandung recaptcha/api2/anchor).
      - Fokus ke frame anchor dan klik #recaptcha-anchor untuk centang.
      - Jika checkbox accepted (mis. aria-checked=true) dan tidak muncul challenge → lanjut submit/cek notifikasi seperti A.
      - Jika setelah centang muncul challenge (bframe) → lanjut ke C (solver).

   C) Muncul challenge → Solver CapSolver
      - Kumpulkan sitekey (detect_captcha akan mengambil dari data-sitekey atau param k= pada iframe).
      - Buat task CapSolver:
        • type: "ReCaptchaV2TaskProxyLess"
        • websiteURL: page.url
        • websiteKey: sitekey
      - Poll hingga solution “ready”.
      - Suntik token ke textarea[name="g-recaptcha-response"], trigger event change.
      - Klik ulang tombol Rain untuk submit.
      - Baca hasil (sukses / already entered / error) seperti di A.

6) Pengaman Jendela Waktu
   - Setelah klik, tetap pantau timer. Jika ronde berakhir (timer reset 30:00–02:01) atau menyentuh 00:00, hentikan percobaan (abort) agar tidak klik di waktu terlarang.
   - Jika “loading” terlalu lama tanpa kepastian (misal >3–5 detik), pindah ke deteksi captcha agar tidak macet.

7) Penutupan Resource Per Akun
   - Setelah akun selesai (sukses/already/gagal): kirim status via send_telegram.
   - Tutup page & context akun untuk hemat RAM/CPU.

8) Penutup Batch dan Siklus Berikutnya
   - Setelah asyncio.gather selesai, verifikasi jumlah processed == jumlah akun unik. Jika ada mismatch, laporkan (opsional retry jika waktu masih valid).
   - Kirim ringkasan batch → kembali ke monitoring (langkah 2) untuk ronde berikutnya.

Jaminan “Tanpa Duplikat” dan “Tanpa Terlewat”
- Dedup sebelum penjadwalan → satu akun hanya masuk satu task dalam batch.
- Semua task akun unik dikumpulkan dengan gather → seluruhnya dieksekusi hingga selesai.
- Tracking processed/succeeded/failed → dapat audit pasca-batch agar tidak ada yang terlewat.

Notifikasi Telegram (send_telegram)
- Mengirim status pada momen penting: mulai, siap (timer), klik, captcha (centang/solver), hasil per akun, batch selesai, dan stop.

Catatan Kompatibilitas & Stabilitas
- reCAPTCHA v2 checkbox ditangani dengan benar: centang anchor terlebih dulu; jika challenge, solver CapSolver tipe "ReCaptchaV2TaskProxyLess" dengan parameter websiteURL & websiteKey yang sesuai; injeksi g-recaptcha-response lalu klik ulang.
- Widget chat Crisp (crisp-client) bukan captcha; z-index tinggi dapat menutup area UI. Namun mekanisme centang dan solver tetap fokus pada iframe reCAPTCHA.
- Kelas CSS situs bisa berubah (mis. tss-*). Selektor .active menjadi kunci untuk readiness; fallback [title='Tip Rain'] tidak digunakan.
- Bahasa UI: pendeteksian pesan “You have already entered this rain!” dipakai untuk identifikasi "sudah ikut". Bisa ditambah deteksi pesan sukses spesifik jika diperlukan.

Parameter yang Dapat Diatur
- visible/headless: mode tampilan browser (berlaku untuk semua context karena 1 browser).
- max_concurrency: jumlah context paralel (disarankan 2–5 untuk stabilitas).
- capsolver_api_key atau ENV CAPSOLVER_API_KEY.
- akunrain.txt: daftar akun (Nama=Token), duplikat dibuang saat penjadwalan.

Ringkas
- 1 browser → banyak context (paralel). Klik hanya saat tombol active + timer 01:59–00:01. Setelah klik, bisa langsung sukses (loading singkat) atau muncul captcha: centang dulu; jika challenge, solver CapSolver ReCaptchaV2TaskProxyLess hingga selesai. Batch aman dari duplikat & akun terlewat berkat dedup + gather + tracking processed.